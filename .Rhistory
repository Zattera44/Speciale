#jpeg('vix_diff.jpg', width = 1920, height = 1080, res = 300)
plot(longdiff~as.Date(longvix$Date)[-1], type = 'l', col = 'green',
xlab = '', ylab='ln(VIX_t) - ln(VIX_t-1)')
skewness(longdiff); skewness(sim2)
kurtosis(longdiff); kurtosis(sim2)
#jpeg('spy_hist.jpg', width = 1920, height = 1080, res = 300)
hist(logSpy, breaks = 100, col = 'blue', freq = FALSE, main = '', xlab = 'Log returns')
lines(density(sim), col = 'red', lwd = 2)
#jpeg('vix_hist.jpg', width = 1920, height = 1080, res = 300)
hist(longdiff, breaks = 100, freq = FALSE, col = 'green',
xlab = 'ln(VIX_t) - ln(VIX_t-1)', main = '')
lines(density(sim2), col = 'red', lwd = 2)
#jpeg('vix_diff.jpg', width = 1920, height = 1080, res = 300)
plot(longdiff~as.Date(longvix$Date)[-1], type = 'l', col = 'green',
xlab = '', ylab='ln(VIX_t) - ln(VIX_t-1)')
acf(longdiff)
acf(longdiff, lags=10)
acf(longdiff, lag.max =10)
acf(longdiff, type='covariance' lag.max =10)
acf(longdiff, type='covariance', lag.max =10)
acf(longdiff, lag.max =10)
install.packages('forecast')
library(forecast)
Acf(longdiff, lag.max = 10)
Acf(longdiff, lag.max = 10, main="")
jpeg('acf_vix.jpg', width = 1920, height = 1080, res = 300)
Acf(longdiff, lag.max = 10, main="")
dev.off()
gc()
simulateVol <- function(nPaths,nDates,ttm,v,sigma,kappa,theta,rho){
dt <- ttm/nDates
Vmat <- matrix(nrow = nPaths, ncol = nDates)
V <- rep(v, nPaths)
for(i in 1:nDates){
z <- rnorm(nPaths); dW <- sqrt(dt)*rnorm(nPaths)
dZ <- rho*dW+sqrt(1-rho^2)*sqrt(dt)*z
V[1:nPaths]<-V[1:nPaths]+kappa*(theta-pmax(V[1:nPaths],0))*dt+sigma*sqrt(pmax(V[1:nPaths],0))*dZ
Vmat[,i] <- V
}
result <- Vmat
}
nPaths <- 1000; nDates <- 365; ttm <- 1; sigma <- 0.1; rho <- -0.1
v <- 0.01; kappa <- 1; theta <- 0.1
sim1 <- simulateVol(nPaths,nDates,ttm,v,sigma,kappa,theta,rho)
v <- 0.01; kappa <- 2
sim2 <- simulateVol(nPaths,nDates,ttm,v,sigma,kappa,theta,rho)
v <- 0.2; kappa <- 1
sim3 <- simulateVol(nPaths,nDates,ttm,v,sigma,kappa,theta,rho)
v <- 0.2; kappa <- 2
sim4 <- simulateVol(nPaths,nDates,ttm,v,sigma,kappa,theta,rho)
kLvL <- rowMeans(t(sim1))
kHvL <- rowMeans(t(sim2))
kLvH <- rowMeans(t(sim3))
kHvH <- rowMeans(t(sim4))
plot(kLvL, ylim=c(0,0.21),
type='l', lty=2, lwd=3, col='blue',
ylab = 'Pathwise average volatility', xlab='Day',
main = 'Effect of kappa and theta')
points(kHvL, col='green')
lines(kLvH, lty=2, lwd=3, col='red')
points(kHvH, col='pink')
abline(0.1, 0, col = 'grey')
plot(kLvL, ylim=c(0,0.21),
type='l', lty=2, lwd=2, col='blue',
ylab = 'Pathwise average volatility', xlab='Day',
main = 'Mean reversion in the Heston model')
lines(kHvL, col='green')
lines(kLvH, lty=2, lwd=3, col='red')
lines(kHvH, col='pink')
plot(kLvL, ylim=c(0,0.21),
type='l', lty=2, lwd=2, col='blue',
ylab = 'Pathwise average volatility', xlab='Day',
main = 'Mean reversion in the Heston model')
lines(kHvL, col='green', lwd=2)
lines(kLvH, lty=2, lwd=2, col='pink')
lines(kHvH, col='pink', lwd=2)
abline(0.1, 0, col = 'grey')
plot(kLvL, ylim=c(0,0.21),
type='l', lty=2, lwd=3, col='blue',
ylab = 'Pathwise average volatility', xlab='Day',
main = 'Mean reversion in the Heston model')
lines(kHvL, col='blue', lwd=3)
lines(kLvH, lty=2, lwd=3, col='pink')
lines(kHvH, col='pink', lwd=3)
abline(0.1, 0, col = 'grey')
jpeg('kappa_theta.jpg', width = 1920, height = 1080, res = 300)
plot(kLvL, ylim=c(0,0.21),
type='l', lty=2, lwd=3, col='blue',
ylab = 'Pathwise average volatility', xlab='Day',
main = 'Mean reversion in the Heston model')
lines(kHvL, col='blue', lwd=3)
lines(kLvH, lty=2, lwd=3, col='pink')
lines(kHvH, col='pink', lwd=3)
abline(0.1, 0, col = 'grey')
dev.off()
n = length(longdiff); mean = mean(longdiff); sd = sd(longdiff)
spy <- read.csv2('/Users/tk/Documents/GitHub/Speciale/data/SPY.csv', sep = ',')
longspy <- read.csv2('/Users/tk/Documents/GitHub/Speciale/data/longSPY.csv', sep = ',')
vix <- read.csv2('/Users/tk/Documents/GitHub/Speciale/data/VIX.csv', sep = ',')
longvix <- read.csv2('/Users/tk/Documents/GitHub/Speciale/data/longVIX.csv', sep = ',')
spy <- spy[c('Date','Adj.Close')]
longspy <- longspy[c('Date','Adj.Close')]
vix <- vix[c('Date','Adj.Close')]
longvix <- longvix[c('Date','Adj.Close')]
spy$Adj.Close <- as.numeric(spy$Adj.Close)
longspy$Adj.Close <- as.numeric(longspy$Adj.Close)
vix$Adj.Close <- as.numeric(vix$Adj.Close)
longvix$Adj.Close <- as.numeric(longvix$Adj.Close)
cor(spy$Adj.Close, vix$Adj.Close)
change <- diff(vix$Adj.Close)
cor(change[-length(change)], change[-1])
#jpeg('spy_vix.jpg', width = 1920, height = 1080, res = 300)
plot(as.Date(vix$Date), vix$Adj.Close/max(vix$Adj.Close), type='l', col ='green',
xlab='', ylab='')
lines(as.Date(vix$Date), spy$Adj.Close/max(spy$Adj.Close), col = 'blue')
logSpy <- diff(log(longspy$Adj.Close))
sim <- rnorm(n = length(logSpy), mean = mean(logSpy), sd = sd(logSpy))
#jpeg('spy_hist.jpg', width = 1920, height = 1080, res = 300)
hist(logSpy, breaks = 100, col = 'blue', freq = FALSE, main = '', xlab = 'Log returns')
lines(density(sim), col = 'red', lwd = 2)
skewness(logSpy); skewness(sim)
kurtosis(logSpy); kurtosis(sim)
longdiff <- diff(log(longvix$Adj.Close))
sim2 <- rnorm(n = length(longdiff), mean = mean(longdiff), sd = sd(longdiff))
#jpeg('vix_hist.jpg', width = 1920, height = 1080, res = 300)
hist(longdiff, breaks = 100, freq = FALSE, col = 'green',
xlab = 'ln(VIX_t) - ln(VIX_t-1)', main = '')
lines(density(sim2), col = 'red', lwd = 2)
#jpeg('vix_diff.jpg', width = 1920, height = 1080, res = 300)
plot(longdiff~as.Date(longvix$Date)[-1], type = 'l', col = 'green',
xlab = '', ylab='ln(VIX_t) - ln(VIX_t-1)')
jpeg('acf_vix.jpg', width = 1920, height = 1080, res = 300)
Acf(longdiff, lag.max = 10, main="")
dev.off()
skewness(longdiff); skewness(sim2)
kurtosis(longdiff); kurtosis(sim2)
n = length(longdiff); mean = mean(longdiff); sd = sd(longdiff)
n
mean
sd
skewness(longdiff); skewness(sim2)
kurtosis(longdiff); kurtosis(sim2)
charFunc <- function(u, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta){
d <- sqrt( (rho*sigma*u*1i-kappa)^2 + sigma^2*(u*1i+u^2) )
d <- -d
g <- (kappa - rho*sigma*u*1i + d) / (kappa - rho*sigma*u*1i - d)
C <- (kappa*theta)/(sigma^2)*((kappa-rho*sigma*u*1i+d)*ttm-2*log((1-g*exp(d*ttm))/(1-g)))
D <- (kappa-rho*sigma*u*1i+d)/(sigma^2)*((1-exp(d*ttm))/(1-g*exp(d*ttm)))
M <- lambda*ttm*((exp(1i*u*mu-0.5*u^2*delta^2)-1)-1i*u*(exp(mu+0.5*delta^2)-1))
res <- exp(C+D*v+1i*u*log(spot))
return(res)
}
BatesCall <- function(spot, strike, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta){
integrand1 <- function(u){
num1 <- charFunc(u-1i, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta)
den1 <- charFunc(-1i, spot, ttm, v, sigma, kappa, theta, rho)
dummy1 <- exp(-1i*u*log(strike))*num1/(1i*u*den1)
integrand1 <- Re(dummy1)
}
integrand2 <- function(u){
dummy2 <- exp(-1i*u*log(strike))*charFunc(u, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta)/(1i*u)
integtand2 <- Re(dummy2)
}
Pi1 <- 0.5 + 1/pi * integrate(integrand1,0,Inf,stop.on.error = FALSE)$value
Pi2 <- 0.5 + 1/pi * integrate(integrand2,0,Inf,stop.on.error = FALSE)$value
res <- spot*Pi1 - strike*Pi2
return(res)
}
lossFunction <- function(parms){
sum <- 0
for(i in 1:l){
sum <- sum + ( (data[[i,1]] - BatesCall(S0,data[[i,2]],0,0,data[[i,3]]/365,parms[1],parms[2],parms[3],parms[4],parms[5])) / (data[[i,6]] * 100) )^2
}
return(sum)
}
BSM <- function(S,K,sigma,TTM,call=T){
d1 <- (log(S/K) + ( sigma^2/2) * TTM)/(sigma * sqrt(TTM))
d2 <- d1 - sigma * sqrt(TTM)
if(call) price <- pnorm(d1) * S - K * pnorm(d2)
else price <- K * pnorm(-d2) - pnorm(-d1) * S
return(price)
}
BSMDelta <- function(S,K,sigma,TTM){
d1 <- (log(S/K) + (sigma^2/2) * TTM)/(sigma * sqrt(TTM))
return(pnorm(d1))
}
BSMVega <- function(S,K,sigma,TTM){
d1 <- (log(S/K) + (sigma^2/2) * TTM)/(sigma * sqrt(TTM))
return(S * dnorm(d1) * sqrt(TTM))
}
impVol <- function(price,S,K,TTM){
f <- function(sigma) price - BSM(S,K,sigma,TTM)
impVol <- uniroot(f,c(0,2))
return(impVol$root)
}
library(tidyverse)
setwd('/Users/saibot/Desktop/cand.merc.mat/3. semester/FinEng')
data <- read_delim('GOOGLData.csv', delim = ";")
setwd("~/Documents/GitHub/Speciale")
data <- read_delim('data/GOOGLData.csv', delim = ";")
l <- length(data$Price); S0 <- 2786
for(i in 1:l){
data[i,'impliedVolatility'] <- impVol(data[[i,1]],S0,data[[i,2]],r,data[[i,3]]/365)
}
data[i,'impliedVolatility'] <- impVol(data[[i,1]],S0,data[[i,2]],data[[i,3]]/365)
data
data$Price
for(i in 1:l){
data[i,'impliedVolatility'] <- impVol(data$Price,S0,data$Strike,data$Expiry/365)
}
data
data <- read_delim('/Users/tk/Desktop/cand.merc.mat/3. semester/FinEng/assignments/GOOGLData.csv', delim = ";")
data$Price
l <- length(data$Price); S0 <- 2786
data$Expiry
for(i in 1:l){
data[i,'impliedVolatility'] <- impVol(data$Price,S0,data$Strike,data$Expiry/365)
}
impVol <- uniroot(f,c(-1,1))
impVol <- function(price,S,K,TTM){
f <- function(sigma) price - BSM(S,K,sigma,TTM)
impVol <- uniroot(f,c(-1,1))
return(impVol$root)
}
for(i in 1:l){
data[i,'impliedVolatility'] <- impVol(data$Price,S0,data$Strike,data$Expiry/365)
}
BSM(100,100,0.1,1)
impVol <- function(price,S,K,TTM){
f <- function(sigma) price - BSM(S,K,sigma,TTM)
impVol <- uniroot(f,c(-10,10))
return(impVol$root)
}
for(i in 1:l){
data[i,'impliedVolatility'] <- impVol(data$Price,S0,data$Strike,data$Expiry/365)
}
impVol <- function(price,S,K,TTM){
f <- function(sigma) price - BSM(S,K,sigma,TTM)
impVol <- uniroot(f,c(0,0.9))
return(impVol$root)
}
for(i in 1:l){
data[i,'impliedVolatility'] <- impVol(data$Price,S0,data$Strike,data$Expiry/365)
}
for(i in 1:l){
data[i,'BS'] <- BSM(S0,data$Strike,0.1,data$Expiry/365)
#data[i,'impliedVolatility'] <- impVol(data$Price,S0,data$Strike,data$Expiry/365)
}
for(i in 1:l){
data[i,'BS'] <- BSM(S0,data$Strike[i],0.1,data$Expiry[i]/365)
#data[i,'impliedVolatility'] <- impVol(data$Price,S0,data$Strike,data$Expiry/365)
}
data$BS
view(data)
for(i in 1:l){
#data[i,'BS'] <- BSM(S0,data$Strike[i],0.1,data$Expiry[i]/365)
data[i,'impliedVolatility'] <- impVol(data$Price[i],S0,data$Strike[i],data$Expiry[i]/365)
}
data$impliedVolatility
source("~/.active-rstudio-document")
data
deltaPlot <- ggplot(data = data , mapping = aes(log(Strike/S0), delta)) +
geom_line(aes(colour = factor(Expiry))) + xlab('log(K/S)') + ylab('Delta') +
labs(colour = "Expiry"); deltaPlot
deltaPlot
charFunc <- function(u, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta){
d <- sqrt( (rho*sigma*u*1i-kappa)^2 + sigma^2*(u*1i+u^2) )
d <- -d
g <- (kappa - rho*sigma*u*1i + d) / (kappa - rho*sigma*u*1i - d)
C <- (kappa*theta)/(sigma^2)*((kappa-rho*sigma*u*1i+d)*ttm-2*log((1-g*exp(d*ttm))/(1-g)))
D <- (kappa-rho*sigma*u*1i+d)/(sigma^2)*((1-exp(d*ttm))/(1-g*exp(d*ttm)))
M <- lambda*ttm*((exp(1i*u*mu-0.5*u^2*delta^2)-1)-1i*u*(exp(mu+0.5*delta^2)-1))
res <- exp(C+D*v+1i*u*log(spot))
return(res)
}
BatesCall <- function(spot, strike, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta){
integrand1 <- function(u){
num1 <- charFunc(u-1i, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta)
den1 <- charFunc(-1i, spot, ttm, v, sigma, kappa, theta, rho)
dummy1 <- exp(-1i*u*log(strike))*num1/(1i*u*den1)
integrand1 <- Re(dummy1)
}
integrand2 <- function(u){
dummy2 <- exp(-1i*u*log(strike))*charFunc(u, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta)/(1i*u)
integtand2 <- Re(dummy2)
}
Pi1 <- 0.5 + 1/pi * integrate(integrand1,0,Inf,stop.on.error = FALSE)$value
Pi2 <- 0.5 + 1/pi * integrate(integrand2,0,Inf,stop.on.error = FALSE)$value
res <- spot*Pi1 - strike*Pi2
return(res)
}
lossFunction <- function(parms){
sum <- 0
for(i in 1:l){
sum <- sum + ( (data$Price[i] - BatesCall(S0,data$Strike[i],data$Expiry[i]/365,
parms[1],parms[2],parms[3],
parms[4],parms[5],parms[6],
parms[7],parms[8])) / (data$Vega[i] * 100) )^2
}
return(sum)
}
BSM <- function(S,K,sigma,TTM,call=T){
d1 <- (log(S/K) + (sigma^2/2) * TTM)/(sigma * sqrt(TTM))
d2 <- d1 - sigma * sqrt(TTM)
if(call) price <- pnorm(d1) * S - K * pnorm(d2)
else price <- K * pnorm(-d2) - pnorm(-d1) * S
return(price)
}
BSMVega <- function(S,K,sigma,TTM){
d1 <- (log(S/K) + (sigma^2/2) * TTM)/(sigma * sqrt(TTM))
return(S * dnorm(d1) * sqrt(TTM))
}
impVol <- function(price,S,K,TTM){
f <- function(sigma) price - BSM(S,K,sigma,TTM)
impVol <- uniroot(f,c(0,1))
return(impVol$root)
}
library(tidyverse)
data <- read_delim('/Users/tk/Desktop/cand.merc.mat/3. semester/FinEng/assignments/GOOGLData.csv', delim = ";")
l <- length(data$Price); S0 <- 2786
for(i in 1:l){
data[i,'impliedVolatility'] <- impVol(data$Price[i],S0,data$Strike[i],data$Expiry[i]/365)
data[i,'vega'] <- BSMVega(S0,data$Strike[i],data$impliedVolatility[i],data$Strike[i]/365) / 100
}
par <- optim(par = c(0.2^2, 1, 2, 0.2^2, -0.25,0.1,-0.2,0.2), lossFunction, method = "L-BFGS-B",
lower = c(0.01,0.01,0.01,0.01,-1,0,-1,0.01), upper = c(0.99,10,10,0.99,1,3,1,0.99))
BatesCall <- function(spot, strike, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta){
integrand1 <- function(u){
num1 <- charFunc(u-1i, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta)
den1 <- charFunc(-1i, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta)
dummy1 <- exp(-1i*u*log(strike))*num1/(1i*u*den1)
integrand1 <- Re(dummy1)
}
integrand2 <- function(u){
dummy2 <- exp(-1i*u*log(strike))*charFunc(u, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta)/(1i*u)
integtand2 <- Re(dummy2)
}
Pi1 <- 0.5 + 1/pi * integrate(integrand1,0,Inf,stop.on.error = FALSE)$value
Pi2 <- 0.5 + 1/pi * integrate(integrand2,0,Inf,stop.on.error = FALSE)$value
res <- spot*Pi1 - strike*Pi2
return(res)
}
par <- optim(par = c(0.2^2, 1, 2, 0.2^2, -0.25,0.1,-0.2,0.2), lossFunction, method = "L-BFGS-B",
lower = c(0.01,0.01,0.01,0.01,-1,0,-1,0.01), upper = c(0.99,10,10,0.99,1,3,1,0.99))
lossFunction(c(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1))
warnings()
data[i,'Vega'] <- BSMVega(S0,data$Strike[i],data$impliedVolatility[i],data$Strike[i]/365) / 100
lossFunction(c(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1))
BatesCall(S0,S0,1,0.039,0.659,0.855,0.034,-0.608,0.584,0.026,0.070)
test <- c(0.039,0.659,0.855,0.034,-0.608,0.584,0.026,0.070)
lossFunction(test)
colnames(data)
length(test)
parms <- test
i <- 1
((data$Price[i] - BatesCall(S0,data$Strike[i],data$Expiry[i]/365,
parms[1],parms[2],parms[3],
parms[4],parms[5],parms[6],
parms[7],parms[8])) / (data$Vega[i] * 100) )^2
BatesCall(S0,data$Strike[i],data$Expiry[i]/365,
parms[1],parms[2],parms[3],
parms[4],parms[5],parms[6],
parms[7],parms[8])
data$Price[1]
(data$Vega[i] * 100) )^2
(data$Vega[i] * 100)
data$Vega
charFunc <- function(u, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta){
d <- sqrt( (rho*sigma*u*1i-kappa)^2 + sigma^2*(u*1i+u^2) )
d <- -d
g <- (kappa - rho*sigma*u*1i + d) / (kappa - rho*sigma*u*1i - d)
C <- (kappa*theta)/(sigma^2)*((kappa-rho*sigma*u*1i+d)*ttm-2*log((1-g*exp(d*ttm))/(1-g)))
D <- (kappa-rho*sigma*u*1i+d)/(sigma^2)*((1-exp(d*ttm))/(1-g*exp(d*ttm)))
M <- lambda*ttm*((exp(1i*u*mu-0.5*u^2*delta^2)-1)-1i*u*(exp(mu+0.5*delta^2)-1))
res <- exp(C+D*v+1i*u*log(spot))
return(res)
}
BatesCall <- function(spot, strike, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta){
integrand1 <- function(u){
num1 <- charFunc(u-1i, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta)
den1 <- charFunc(-1i, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta)
dummy1 <- exp(-1i*u*log(strike))*num1/(1i*u*den1)
integrand1 <- Re(dummy1)
}
integrand2 <- function(u){
dummy2 <- exp(-1i*u*log(strike))*charFunc(u, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta)/(1i*u)
integtand2 <- Re(dummy2)
}
Pi1 <- 0.5 + 1/pi * integrate(integrand1,0,Inf,stop.on.error = FALSE)$value
Pi2 <- 0.5 + 1/pi * integrate(integrand2,0,Inf,stop.on.error = FALSE)$value
res <- spot*Pi1 - strike*Pi2
return(res)
}
lossFunction <- function(parms){
sum <- 0
for(i in 1:l){
sum <- sum + ((data$Price[i] - BatesCall(S0,data$Strike[i],data$Expiry[i]/365,
parms[1],parms[2],parms[3],
parms[4],parms[5],parms[6],
parms[7],parms[8])) / (data$Vega[i] * 100) )^2
}
return(sum)
}
BSM <- function(S,K,sigma,TTM,call=T){
d1 <- (log(S/K) + (sigma^2/2) * TTM)/(sigma * sqrt(TTM))
d2 <- d1 - sigma * sqrt(TTM)
if(call) price <- pnorm(d1) * S - K * pnorm(d2)
else price <- K * pnorm(-d2) - pnorm(-d1) * S
return(price)
}
BSMVega <- function(S,K,sigma,TTM){
d1 <- (log(S/K) + (sigma^2/2) * TTM)/(sigma * sqrt(TTM))
return(S * dnorm(d1) * sqrt(TTM))
}
impVol <- function(price,S,K,TTM){
f <- function(sigma) price - BSM(S,K,sigma,TTM)
impVol <- uniroot(f,c(0,1))
return(impVol$root)
}
library(tidyverse)
data <- read_delim('/Users/tk/Desktop/cand.merc.mat/3. semester/FinEng/assignments/GOOGLData.csv', delim = ";")
l <- length(data$Price); S0 <- 2786
for(i in 1:l){
data[i,'impliedVolatility'] <- impVol(data$Price[i],S0,data$Strike[i],data$Expiry[i]/365)
data[i,'Vega'] <- BSMVega(S0,data$Strike[i],data$impliedVolatility[i],data$Expiry[i]/365) / 100
}
test <- c(0.039,0.659,0.855,0.034,-0.608,0.584,0.026,0.070)
lossFunction(test)
par <- optim(par = c(0.2^2, 1, 2, 0.2^2, -0.25,0.1,-0.2,0.2), lossFunction, method = "L-BFGS-B",
lower = c(0.01,0.01,0.01,0.01,-1,0,-1,0.01), upper = c(0.99,10,10,0.99,1,3,1,0.99))
lossFunction(par)
par
lossFunction(par$par)
charFunc <- function(u, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta){
d <- sqrt( (rho*sigma*u*1i-kappa)^2 + sigma^2*(u*1i+u^2) )
d <- -d
g <- (kappa - rho*sigma*u*1i + d) / (kappa - rho*sigma*u*1i - d)
C <- (kappa*theta)/(sigma^2)*((kappa-rho*sigma*u*1i+d)*ttm-2*log((1-g*exp(d*ttm))/(1-g)))
D <- (kappa-rho*sigma*u*1i+d)/(sigma^2)*((1-exp(d*ttm))/(1-g*exp(d*ttm)))
M <- lambda*ttm*((exp(1i*u*mu-0.5*u^2*delta^2)-1)-1i*u*(exp(mu+0.5*delta^2)-1))
res <- exp(C+D*v+1i*u*log(spot))
return(res)
}
BatesCall <- function(spot, strike, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta){
integrand1 <- function(u){
num1 <- charFunc(u-1i, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta)
den1 <- charFunc(-1i, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta)
dummy1 <- exp(-1i*u*log(strike))*num1/(1i*u*den1)
integrand1 <- Re(dummy1)
}
integrand2 <- function(u){
dummy2 <- exp(-1i*u*log(strike))*charFunc(u, spot, ttm, v, sigma, kappa, theta, rho, lambda, mu, delta)/(1i*u)
integtand2 <- Re(dummy2)
}
Pi1 <- 0.5 + 1/pi * integrate(integrand1,0,Inf,stop.on.error = FALSE)$value
Pi2 <- 0.5 + 1/pi * integrate(integrand2,0,Inf,stop.on.error = FALSE)$value
res <- spot*Pi1 - strike*Pi2
return(res)
}
lossFunction <- function(parms){
sum <- 0
for(i in 1:l){
sum <- sum + ((data$Price[i] - BatesCall(S0,data$Strike[i],data$Expiry[i]/365,
parms[1],parms[2],parms[3],
parms[4],parms[5],parms[6],
parms[7],parms[8])) / (data$Vega[i] * 100) )^2
}
return(sum)
}
BSM <- function(S,K,sigma,TTM,call=T){
d1 <- (log(S/K) + (sigma^2/2) * TTM)/(sigma * sqrt(TTM))
d2 <- d1 - sigma * sqrt(TTM)
if(call) price <- pnorm(d1) * S - K * pnorm(d2)
else price <- K * pnorm(-d2) - pnorm(-d1) * S
return(price)
}
BSMVega <- function(S,K,sigma,TTM){
d1 <- (log(S/K) + (sigma^2/2) * TTM)/(sigma * sqrt(TTM))
return(S * dnorm(d1) * sqrt(TTM))
}
impVol <- function(price,S,K,TTM){
f <- function(sigma) price - BSM(S,K,sigma,TTM)
impVol <- uniroot(f,c(0,1))
return(impVol$root)
}
library(tidyverse)
data <- read_delim('/Users/tk/Desktop/cand.merc.mat/3. semester/FinEng/assignments/GOOGLData.csv', delim = ";")
l <- length(data$Price); S0 <- 2786
for(i in 1:l){
data[i,'impliedVolatility'] <- impVol(data$Price[i],S0,data$Strike[i],data$Expiry[i]/365)
data[i,'Vega'] <- BSMVega(S0,data$Strike[i],data$impliedVolatility[i],data$Expiry[i]/365) / 100
}
#par <- optim(par = c(0.2^2, 1, 2, 0.2^2, -0.25,0.1,-0.2,0.2), lossFunction, method = "L-BFGS-B",
#             lower = c(0.01,0.01,0.01,0.01,-1,0,-1,0.01), upper = c(0.99,10,10,0.99,1,3,1,0.99))
v <- 0.06467059
sigma <- 1.00161919
kappa <- 1.99871299
theta <- 0.08724422
rho <- -0.30794884
lambda <- 0.1
mu <- -0.2
delta <- 0.2
for(i in 1:l){
BatesPrice <- BatesCall(S0,data$Strike[i],data$Expiry[i]/365,v,sigma,kappa,theta,rho,lambda,mu,delta)
data[i,'BatesImp'] <- impVol(BatesPrice,S0,data$Strike[i],data$Expiry[i]/365)
}
impVolPlot <- ggplot(data = data , mapping = aes(log(Strike/S0), impliedVolatility)) +
geom_line(aes(x = log(Strike/S0), y = impliedVolatility, colour = factor(Expiry))) +
geom_line(aes(x = log(Strike/S0), y = BatesImp, colour = factor(Expiry)), linetype="dashed") +
xlab('log(K/S)') +
ylab('Implied volatility') +
labs(colour = "Expiry"); impVolPlot
